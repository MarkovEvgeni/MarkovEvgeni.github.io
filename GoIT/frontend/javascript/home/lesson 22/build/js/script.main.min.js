'use strict';

document.addEventListener('DOMContentLoaded', function () {

    'use strict';

    var body = document.body;

    var questions = {}; // Объявляем объект, который будет содержать вопросы и варианты ответов.
    questions = { // Заполняем объект вопросами и ответами
        0: {
            'title': 'What is HTML?',
            'answers': ['Hypertext Markup Language', 'Objective Programming Language', 'How To Make Landingpage'],
            'check': 0
        },
        1: {
            'title': 'What is CSS?',
            'answers': ['Censor Sold Solar System', 'Central Sugar Station', 'Cascading Style Sheets'],
            'check': 2
        },
        2: {
            'title': 'What is JavaScript?',
            'answers': ['Analog of Java with more functions', 'High-level interpreted programming language', 'Language of Javas in Star Wars'],
            'check': 1
        },
        3: {
            'title': 'Select the CMS',
            'answers': ['Wordpress', 'Pure', 'Joomla', 'Bootstrap'],
            'check': [0, 2]
        }
    };

    try {
        module.exports = questions;
    } catch (e) {}

    localStorage.setItem('questionsAnswers', JSON.stringify(questions)); // Записываем вопросы и ответы в localStorage в качестве строки.

    var questionsBlock = localStorage.getItem('questionsAnswers'); // Считываем вопросы и ответы из localStorage строкой, записываем данные в переменную.       

    questionsBlock = JSON.parse(questionsBlock); // Трансформируем строку с вопросами и объектами назад в объект.

    var wrapper = {}; // Создадим объект для удобного доступа к элемента объекта questionsBlock из script'a в HTML при использовании шаблона

    wrapper = {
        name: questionsBlock
    };

    var template = document.getElementById('template'); // Объявляем переменную, которой присваиваем элемент DOM в который будет встроен шаблон.
    var templateHTML = template.innerHTML; // Объявляем и присваиваем переменной HTML-код, содержащийся в элементе <script>, в который будет встроен шаблон.
    var content = _.template(templateHTML); // Объявляем переменную, которой присваиваем функцию "_template" шаблонизатора Lodash. В качестве параметра функции выступает HTML-код, содержащийся в элементе <script>, в который будет встроен шаблон. 

    var abc = document.createElement('div');
    abc.style.padding = 10;
    abc.innerHTML = content(wrapper);
    body.appendChild(abc); // Вставляем шаблон на страницу.   


    //Объявляем правильные ответы, на странице будут выделены зеленым цветом.

    for (var index in questionsBlock) {
        var i = +index;
        if (questionsBlock[i]['check'].length === undefined) {
            var _k = questionsBlock[i]['check'] + 1; // Объявляем переменную которой присваиваем порядковый номер с правильным ответом, который находится в 'check'
            var _rightAnswer = document.querySelector('.question_block_' + (i + 1) + '_' + _k + ''); // Объявляем переменную, которой присвиваем input соответствующий правильному ответу 
            _rightAnswer.classList.add("right_answer"); // Добавляем класс 'right_answer' input который соответствует правильному ответу
        } else {
            var z = 0;
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = questionsBlock[i]['check'][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var index2 = _step.value;

                    var _z = +index2;
                    var k = _z + 1; // Объявляем переменную которой присваиваем порядковый номер с правильным ответом, который находится в 'check'
                    var rightAnswer = document.querySelector('.question_block_' + (i + 1) + '_' + k + ''); // Объявляем переменную, которой присвиваем input соответствующий правильному ответу 
                    rightAnswer.classList.add("right_answer"); // Добавляем класс 'right_answer' input который соответствует правильному ответу
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        };
    };

    var calc = {
        calculateResults: function calculateResults(el) {
            // Объявляем функцию которая будет рассчитывать количество правильных ответов и выводить модальное окно с результатом.
            el.preventDefault(); // Предотвращаем выполнение функции по умолчанию.
            var rightAnswersQuantity = document.querySelectorAll('.right_answer'); // Объявляем переменную в которую записываем все ответы с классом 'right_answer'
            rightAnswersQuantity = rightAnswersQuantity.length; // Присваиваем длину массива, содержащего элементы 'right_answer' переменной.
            var checkedAnswers = document.querySelectorAll(':checked'); // Объявляем переменную, которая будет содержать все отмеченные ответы
            checkedAnswers = checkedAnswers.length; // Считаем количество отмеченных ответов
            var usersRightAnswers = document.querySelectorAll('.right_answer' + ':checked'); // Объявляем перменную, которая будет содержать массив с отмеченными input с классом 'right_answer'
            usersRightAnswers = usersRightAnswers.length; // Считаем количество верно отмеченных ответов
            var conclusiveResult = (usersRightAnswers - (checkedAnswers - usersRightAnswers)) / rightAnswersQuantity * 100; // Рассчитываем результат
            console.log('before', conclusiveResult);
            var round = {
                rounder: function rounder(val) {
                    return Math.round(val * 100) / 100;
                }
            };

            try {
                module.exports = round;
            } catch (e) {}
            conclusiveResult = round.rounder(conclusiveResult);
            console.log('after', conclusiveResult);
            if (conclusiveResult > 0) {
                conclusiveResult = conclusiveResult + "%";
            } else {
                conclusiveResult = 0 + "%";
            };
            window.scrollTo(0, 0);
            var background = document.createElement('div'); // Создаем background для модального окна, чтобы не допустить нажатия на элементы body.
            background.style.zIndex = "2";
            background.style.width = "100%";
            background.style.height = "100%";
            background.style.backgroundColor = "rgba(192,192,192,0.3)";
            body.style.overflow = "hidden";
            background.style.top = "0";
            background.style.textAlign = "center";
            background.style.left = "0";
            background.style.position = "absolute";
            body.appendChild(background); // Добавляем background
            var before = document.createElement('div'); // Создаем элемент для выравнивания модального окна по высоте и ширине в зависимости от размера body
            before.style.content = "";
            before.style.display = "inline-block";
            before.style.height = "100%";
            before.style.verticalAlign = "middle";
            background.appendChild(before); // Добавляем before
            var modal = document.createElement('div'); // Создаем модальное окно
            modal.style.zIndex = "3";
            modal.style.borderRadius = "15px";
            modal.style.border = "5px solid black";
            modal.style.height = "200px";
            modal.style.width = "400px";
            modal.style.verticalAlign = "middle";
            modal.style.background = "white";
            modal.style.display = "inline-block";
            background.appendChild(modal); // Добавляем модальное окно
            var head = document.createElement('h4');
            head.innerHTML = 'Ваш результат';
            modal.appendChild(head);
            var result1 = document.createElement('p');
            result1.innerHTML = 'Вы отметили ответов: ' + checkedAnswers;
            modal.appendChild(result1);
            var result2 = document.createElement('p');
            result2.innerHTML = 'В том числе отметили верно: ' + usersRightAnswers;
            modal.appendChild(result2);
            var result3 = document.createElement('p');
            result3.innerHTML = 'В тесте было правильных ответов: ' + rightAnswersQuantity;
            modal.appendChild(result3);
            var result4 = document.createElement('h4');
            result4.innerHTML = 'Ваш результат: ' + conclusiveResult;
            modal.appendChild(result4);
            var refresh = document.createElement('input'); // Создаем кнопку обновления страницы и сброса результата
            refresh.type = 'button';
            refresh.id = 'reload';
            refresh.value = 'Попробовать снова';
            modal.appendChild(refresh);
            var calc2 = {
                rel: function rel(el) {
                    // Функция обновления страницы
                    el.preventDefault(); // Предотвращаем выполнение функции по умолчанию.
                    location.reload();
                    return 'Everything is fine';
                }
            };
            var reload = document.getElementById('reload');
            reload.addEventListener('click', calc2.rel); // Добавляем функцию обновления кнопке refresh
        }
    };

    var checkResults = document.getElementById('button');
    checkResults.addEventListener('click', calc.calculateResults); // Добавляем функцию рассчета результата и вывода модального окна кнопке "Проверить мой результат"
});
//# sourceMappingURL=data:application/json;base64,
