"use strict";document.addEventListener("DOMContentLoaded",function(){function e(){var e=document.querySelectorAll(".carousels__item--slides"),t=0-e[0].offsetWidth/3,n=2*t;e[1].style.left=t+"px",e[2].style.left=n+"px"}function t(e){var t=e.parentNode,n=(t.offsetWidth,t.querySelector(".carousels__item--slides"));n.offsetWidth,parseInt(getComputedStyle(n).left);e.addEventListener("mouseover",o),e.addEventListener("mouseout",s),e.addEventListener("click",i)}function n(e){var t=e.parentNode,n=(t.offsetWidth,t.querySelector(".carousels__item--slides"));n.offsetWidth,parseInt(getComputedStyle(n).left);e.addEventListener("mouseover",o),e.addEventListener("mouseout",s),e.addEventListener("click",r)}function o(){this.style.opacity=1,this.style.cursor="pointer"}function s(){this.style.opacity=.5,this.style.cursor="default"}function i(){var e=this.parentNode,t=e.offsetWidth,n=e.querySelector(".carousels__item--slides"),o=n.offsetWidth,s=parseInt(getComputedStyle(n).left);o+s-t==0&&(s=t),s-=t,n.style.left=s+"px"}function r(){var e=this.parentNode,t=e.offsetWidth,n=e.querySelector(".carousels__item--slides"),o=n.offsetWidth,s=parseInt(getComputedStyle(n).left);0==s&&(s=-o,console.log(s)),s+=t,n.style.left=s+"px"}window.onresize=e,e();var a=document.querySelectorAll(".next"),l=document.querySelectorAll(".prev");a.forEach(t),l.forEach(n)}),document.addEventListener("DOMContentLoaded",function(){function e(e,t,n){t=400,n=24;var o=n,s=t,i=s/o;e.preventDefault();var r=a.offsetHeight,d=c.offsetHeight;if(0==r){a.style.height=r+"px",a.classList.remove("non-visible");var u=setInterval(function(){if(i>0){var e=d/(s/o);r+=e,a.style.height=r+"px",i-=1}else clearInterval(u),l.innerHTML="Hide partners"},s/o)}else var u=setInterval(function(){if(i>0){var e=d/(s/o);r-=e,a.style.height=r+"px",i-=1}else clearInterval(u),a.classList.add("non-visible"),l.innerHTML="See other partners"},s/o)}function t(){var e=document.querySelectorAll(".masonry__item");if(e.length>6){var t=document.querySelector(".masonry__item");t.remove()}}function n(){var e=document.getElementsByClassName("mosaic"),t=document.createElement("div");u=t,t.className="text__container masonry__item",e[0].appendChild(t);var n=document.createElement("div");n.className="inner__text",n.innerHTML=d,t.appendChild(n),s()}function o(){var e=document.querySelector(".mosaic");new Masonry(e,{itemSelector:".masonry__item",columnWidth:5,isAnimated:!0,animationOptions:{queue:!1,duration:500}})}function s(){var e="https://www.googleapis.com/customsearch/v1?q="+d+"&cx=016732624816471061428:3gt2rcxo7lk&imgSize=medium&fileType=jpg&num=1&searchType=image&imgDominantColor=pink&key=AIzaSyBncOk0OKD0p7SEqpnCnj68lZAl0zqxxvo",t=new XMLHttpRequest;t.open("GET",e,!0),t.send(),t.onreadystatechange=function(){if(4==t.readyState)if(200!=t.status)console.log("Изображение по данному запросу не получено "+t.status+": "+t.statusText);else{var e=JSON.parse(t.responseText),n=e.items[0].link,s=e.items[0].image.width,i=e.items[0].image.height,r=s/i;if(r>2)var a=440;else var a=310*r;u.style.backgroundImage="url("+n+")",u.style.width=a+"px",u.style.backgroundSize="auto 310px",o()}}}function i(){function e(e,t){var n="jsonp_callback_"+Math.round(1e5*Math.random());window[n]=function(e){delete window[n],document.body.removeChild(o),t(e)};var o=document.createElement("script");o.src=e+(e.indexOf("?")>=0?"&":"?")+"callback="+n,document.body.appendChild(o)}e("http://randomword.setgetgo.com/get.php",function(e){d=e.Word,t(),n(),o()})}function r(e){e.preventDefault(),d=document.getElementsByClassName("search__input")[0].value,0==d?i():(t(),n(),o())}var a=document.querySelector(".hidden-list"),l=document.querySelector(".partners__link"),c=document.querySelector(".etalon");l.addEventListener("click",e);var d,u,m=0,f=setTimeout(function e(){i(),m++,m<5?f=setTimeout(e,3e3):clearTimeout},2e3),p=document.getElementsByClassName("search__btn");p[0].addEventListener("click",r)});
//# sourceMappingURL=data:application/json;base64,
