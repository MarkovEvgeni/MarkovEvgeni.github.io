"use strict";document.addEventListener("DOMContentLoaded",function(){function e(){var e=window.pageYOffset;console.log(e);var t=setInterval(function(){e>10?(window.scrollBy(0,-10),e-=10):(clearInterval(t),window.scrollTo(0,0))},4)}function t(){console.log("SET BUTTON");var e=s.previousElementSibling,t=e.offsetWidth,n=document.documentElement.clientWidth,i=(n-t)/2;if(i>90){var l=(i-80)/2;s.style.right=l+"px"}else s.style.right="5px";var e=s.previousElementSibling}function n(e,t,n){if(e.classList.contains("hidden")){t=168,n=24;var i=n,s=t,l=s/i,o=0,d=70;e.classList.remove("hidden");var r=setInterval(function(){if(e.style.borderWidth="2px",e.style.padding="3px",l>0){var t=d/(s/i);o+=t,e.style.height=o+"px",e.style.width=o+"px",l-=1}else clearInterval(r)},s/i)}}function i(e,t,n){if(!e.classList.contains("hidden")){t=168,n=24;var i=n,s=t,l=s/i,o=70,d=70,r=setInterval(function(){if(l>0){var t=d/(s/i);o-=t,e.style.height=o+"px",e.style.width=o+"px",l-=1}else e.style.borderWidth="0px",e.style.padding="0px",e.classList.add("hidden"),clearInterval(r)},s/i)}}var s=document.getElementsByClassName("updown")[0];s.addEventListener("click",e),t();var l=!1;window.onscroll=function(){var e=document.documentElement.clientHeight,t=window.pageYOffset||document.documentElement.scrollTop;t>e||t>400?n(s):i(s)},window.addEventListener("resize",function(){l||(t(),l=!0,setTimeout(function(){l=!1},200))})});
//# sourceMappingURL=data:application/json;base64,
