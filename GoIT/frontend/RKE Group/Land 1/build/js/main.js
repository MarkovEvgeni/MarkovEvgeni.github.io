"use strict";document.addEventListener("DOMContentLoaded",function(){function e(){var e=document.documentElement.clientHeight,t=window.pageYOffset||document.documentElement.scrollTop;t>e||t>400?a(d):l(d)}function t(){var e=window.pageYOffset;console.log(e);var t=setInterval(function(){e>10?(window.scrollBy(0,-10),e-=10):(clearInterval(t),window.scrollTo(0,0))},4)}function n(){console.log("SET BUTTON");var e=d.previousElementSibling,t=e.offsetWidth,n=document.documentElement.clientWidth,a=(n-t)/2;if(a>90){var l=(a-80)/2;d.style.right=l+"px"}else d.style.right="5px";var e=d.previousElementSibling}function a(e,t,n){if(e.classList.contains("hidden")){t=168,n=24;var a=n,l=t,d=l/a,o=0,i=70;e.classList.remove("hidden");var s=setInterval(function(){if(e.style.borderWidth="2px",e.style.padding="3px",d>0){var t=i/(l/a);o+=t,e.style.height=o+"px",e.style.width=o+"px",d-=1}else clearInterval(s)},l/a)}}function l(e,t,n){if(!e.classList.contains("hidden")){t=168,n=24;var a=n,l=t,d=l/a,o=70,i=70,s=setInterval(function(){if(d>0){var t=i/(l/a);o-=t,e.style.height=o+"px",e.style.width=o+"px",d-=1}else e.style.borderWidth="0px",e.style.padding="0px",e.classList.add("hidden"),clearInterval(s)},l/a)}}var d=document.getElementsByClassName("updown")[0];d.addEventListener("click",t),n();var o=!1;document.addEventListener("scroll",e),window.addEventListener("resize",function(){o||(n(),o=!0,setTimeout(function(){o=!1},200))})}),document.addEventListener("DOMContentLoaded",function(){function e(){o.style.position="fixed",o.style.backgroundColor="rgba(0,0,0,1)",o.style.width="100%",o.style.left="0px",o.style.top="0px"}function t(){o.style.backgroundColor="rgba(0,0,0,.6)",o.style.position="relative"}function n(){var e=document.getElementsByClassName("phrase")[0],t=getComputedStyle(e),n=parseInt(t.paddingBottom)+o.offsetHeight+"px";e.style.paddingBottom=n}function a(){var e=document.getElementsByClassName("phrase")[0],t=getComputedStyle(e),n=parseInt(t.paddingBottom)-o.offsetHeight+"px";e.style.paddingBottom=n}function l(){var l=d.offsetHeight,s=o.offsetHeight,r=window.pageYOffset||document.documentElement.scrollTop;if(r>=l-s){if(console.log("tumbler",i),"on"!=i)return;e(),n(),i="off"}else{if("off"!=i)return;t(),a(),i="on"}}var d=document.getElementsByTagName("header")[0],o=document.getElementsByClassName("main-menu")[0],i="on";document.addEventListener("scroll",l)}),document.addEventListener("DOMContentLoaded",function(){function e(){var e=document.createElement("div");e.classList.add("dynamic-overlay"),e.style.zIndex="10",e.style.width="100%",e.style.height="100%",e.style.backgroundColor="rgba(192,192,192,0.7)",e.style.top="0",e.style.textAlign="center",e.style.left="0",e.style.position="fixed",o.appendChild(e),n()}function t(){var e=document.getElementsByClassName("dynamic-overlay")[0];o.removeChild(e)}function n(){var e=document.getElementsByClassName("dynamic-overlay")[0],t=document.createElement("div");t.style.content="",t.style.display="inline-block",t.style.height="100%",t.style.verticalAlign="middle",e.appendChild(t);var n=document.createElement("div");n.style.zIndex="3",n.style.borderRadius="10px",n.style.border="3px solid black",n.style.maxWidth="320px",n.classList.add("modal-window"),n.style.verticalAlign="middle",n.style.background="white",n.style.display="inline-block",e.appendChild(n),a()}function a(){var e=document.getElementsByClassName("modal-window")[0],n=document.createElement("form");n.classList.add("order_form"),e.appendChild(n);var a=document.createElement("h3");n.appendChild(a),a.innerHTML="Заявка";var d=document.createElement("input");n.appendChild(d),d.setAttribute("name","name"),d.placeholder="Как к Вам обращаться?";var o=document.createElement("input");n.appendChild(o),o.placeholder="Ваш телефон",o.setAttribute("name","telephone");var i=document.createElement("input");n.appendChild(i),i.placeholder="Ваш e-mail",i.setAttribute("name","email");var s=document.createElement("select");n.appendChild(s),s.setAttribute("name","grade");var r=document.createElement("option");s.appendChild(r),r.innerHTML="Выберите марку",r.style.fontWeight="bold";var c=document.createElement("option");s.appendChild(c),c.value="Марка антрацита - АШ",c.innerHTML="АШ";var m=document.createElement("option");s.appendChild(m),m.value="Марка антрацита - АC",m.innerHTML="АС";var u=document.createElement("option");s.appendChild(u),u.value="Марка антрацита - АМ",u.innerHTML="АМ";var p=document.createElement("option");s.appendChild(p),p.value="Марка антрацита - АО",p.innerHTML="АО";var v=document.createElement("option");s.appendChild(v),v.value="Марка антрацита - АК",v.innerHTML="АК";var f=document.createElement("option");s.appendChild(f),f.value="Марка антрацита - АКО",f.innerHTML="АКО";var h=document.createElement("input");n.appendChild(h),h.placeholder="Укажите тоннаж",h.setAttribute("name","tonnage");var y=document.createElement("input");n.appendChild(y),y.type="submit",y.innerHTML="ОФОРМИТЬ",y.addEventListener("click",l);var g=document.createElement("div");n.appendChild(g),g.innerHTML="отменить",g.classList.add("cancel_button"),g.addEventListener("click",t)}function l(e){e.preventDefault();var t="name="+document.forms[0][0].value+"&telephone="+document.forms[0][1].value+"&email="+document.forms[0][2].value+"&grade="+document.forms[0][3].value+"&tonnage="+document.forms[0][4].value;console.log(t);var n=new XMLHttpRequest;n.open("POST","../send.php",!0),n.send(t),n.onreadystatechange=function(){4==n.readyState&&(200!=n.status?alert("Отправить данные не удалось"+n.status+": "+n.statusText):alert("Ваша заявка успешно отправлена. Мы свяжемся с Вами в самое ближайшее время."))}}var d=document.getElementsByClassName("grade")[0].childNodes[5];d.addEventListener("click",e),console.log(d);var o=document.body});
//# sourceMappingURL=data:application/json;base64,
